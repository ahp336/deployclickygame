{"version":3,"sources":["components/Card/index.js","components/Wrapper/index.js","components/Header/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","clickCount","id","alt","name","src","image","Wrapper","children","Header","Score","highscore","score","App","state","cards","gameOver","setState","forEach","card","count","alert","find","o","i","console","log","this","sort","Math","random","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kuDAGe,SAASA,EAAKC,GAC3B,OACE,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,MAC1D,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,U,MCA1BC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCD1B,SAASC,EAAOX,GAC7B,OAAO,wBAAIC,UAAU,SAASD,EAAMU,U,MCDvB,SAASE,EAAMZ,GAC1B,OAAO,yBAAKC,UAAU,SAAf,eAAoCD,EAAMa,UAA1C,WAA6Db,EAAMc,O,WCgE/DC,G,iNA3DbC,MAAQ,CACNC,QACAH,MAAO,EACPD,UAAW,G,EAGbK,SAAW,WAST,OARI,EAAKF,MAAMF,MAAQ,EAAKE,MAAMH,WAChC,EAAKM,SAAS,CAAEN,UAAW,EAAKG,MAAMF,QAExC,EAAKE,MAAMC,MAAMG,SAAQ,SAAAC,GACvBA,EAAKC,MAAQ,KAEfC,MAAM,sBAAD,OAAuB,EAAKP,MAAMF,QACvC,EAAKK,SAAS,CAAEL,MAAO,KAChB,G,EAITX,WAAa,SAAAC,GACX,EAAKY,MAAMC,MAAMO,MAAK,SAACC,EAAGC,GACxB,GAAID,EAAErB,KAAOA,EAAI,CACf,GAAuB,IAAnBa,EAAMS,GAAGJ,MAMX,OALAL,EAAMS,GAAGJ,MAAQL,EAAMS,GAAGJ,MAAQ,EAClC,EAAKH,SAAS,CAAEL,MAAO,EAAKE,MAAMF,MAAQ,IAAK,WAC7Ca,QAAQC,IAAIC,KAAKb,MAAMF,UAEzB,EAAKE,MAAMC,MAAMa,MAAK,kBAAMC,KAAKC,SAAW,OACrC,EAEP,EAAKd,gB,wEAOH,IAAD,OACP,OACE,yBAAKjB,UAAU,OACf,kBAAC,EAAD,KACE,kBAACU,EAAD,kCAEA,kBAACC,EAAD,CAAOC,UAAWgB,KAAKb,MAAMH,UAAWC,MAAOe,KAAKb,MAAMF,QACzDe,KAAKb,MAAMC,MAAMgB,KAAI,SAAAZ,GAAI,OACxB,kBAACtB,EAAD,CACEI,WAAY,EAAKA,WACjBC,GAAIiB,EAAKjB,GACT8B,IAAKb,EAAKjB,GACVI,MAAOa,EAAKb,iB,GAlDN2B,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.df7338fe.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nexport default function Card(props) {\n  return (\n    <div className=\"card\" onClick={() => props.clickCount(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Header(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Score(props) {\n    return <div className=\"score\">High Score: {props.highscore} Score: {props.score}</div>\n} ","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport Score from \"./components/Score\";\nimport cards from \"./cards.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    highscore: 0\n  };\n\n  gameOver = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score })\n    }\n    this.state.cards.forEach(card => {\n      card.count = 0;\n    });\n    alert(`Game Over \\nScore: ${this.state.score}`);\n    this.setState({ score: 0 });\n    return true;\n  }\n\n\n  clickCount = id => {\n    this.state.cards.find((o, i) => {\n      if (o.id === id) {\n        if (cards[i].count === 0) {\n          cards[i].count = cards[i].count + 1;\n          this.setState({ score: this.state.score + 1 }, function () {\n            console.log(this.state.score);\n          });\n          this.state.cards.sort(() => Math.random() - 0.5)\n          return true;\n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  };\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n      <Wrapper>\n        <Header>Click on Scooby-Doo image\n        </Header>\n        <Score highscore={this.state.highscore} score={this.state.score} />\n        {this.state.cards.map(card => (\n          <Card\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}